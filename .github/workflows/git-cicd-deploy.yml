# This is a basic workflow to help you get started with Actions


name: MuleSoft deployment with GitHub Actions CI


# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]




jobs:


  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2.1.5
        with:
    # A list of files, directories, and wildcard patterns to cache and restore
          path: /home/runner/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
              ${{ runner.os }}-maven-
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 1.8   
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v16
        with:
         repositories: |
                [
                  {
                    "id": "MuleRepository",
                    "name": "MuleRepository",
                    "url": "https://repository.mulesoft.org/nexus-ee/content/repositories/releases-ee/",
                    "releases": {
                      "enabled": "true"
                    },
                    "snapshots": {
                      "enabled": "true"
                    }
                  }
                ]
         servers: |
                [
                  {
                    "id": "anypoint-exchange-v2",
                    "username": "${{ secrets.ANYPOINT_USERNAME }}",
                    "password": "${{ secrets.ANYPOINT_PASSWORD }}",
                    "configuration": {
                      "httpConfiguration": {
                        "all": {
                          "usePreemptive": "true"
                        }
                      }
                    }
                  },
                  {
                    "id": "MuleRepository",
                    "username": "${{ secrets.ANYPOINT_USERNAME }}",
                    "password": "${{ secrets.ANYPOINT_PASSWORD }}",
                    "configuration": {
                      "httpConfiguration": {
                        "all": {
                          "usePreemptive": "true"
                        }
                      }
                    }
                  }
                ]      
        
      
      
      # Runs a single command using the runners shell
      - name: Build
        run: mvn clean package


      # Runs a set of commands using the runners shell
      - name: Artifact file name with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse -short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$comitHash.jar/g")
          mv $artifactName1 $artifactName2
          
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          # Artifact name
          name: build_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: target/*.jar
  deploy-dev:
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2.1.5
        with:
    # A list of files, directories, and wildcard patterns to cache and restore
          path: /home/runner/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
              ${{ runner.os }}-maven-
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 1.8   
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.9
        with:
        # Artifact name
          name: build_artifact
          
      - name: Deploy to Anypoint Platform
        env:
          USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
          PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
          
        run: |
          artifactName=$(ls *.jar | head -1)
          mvn mule:deploy -Dmule.artifact=$artifactName -Dusername=$USERNAME -Dpassword=$PASSWORD






  deploy-test:
    needs: deploy-dev
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Test
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2.1.5
        with:
    # A list of files, directories, and wildcard patterns to cache and restore
          path: /home/runner/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
              ${{ runner.os }}-maven-
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 1.8   
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.9
        with:
        # Artifact name
          name: build_artifact
          
      - name: Deploy to Anypoint Platform
        env:
          USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
          PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
          
        run: |
          artifactName=$(ls *.jar | head -1)
          mvn mule:deploy -Dmule.artifact=$artifactName -Dusername=$USERNAME -Dpassword=$PASSWORD


  deploy-production:
    needs: deploy-test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Production
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2.1.5
        with:
    # A list of files, directories, and wildcard patterns to cache and restore
          path: /home/runner/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
              ${{ runner.os }}-maven-
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
    # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 1.8   
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.9
        with:
        # Artifact name
          name: build_artifact
          
      - name: Deploy to Anypoint Platform
        env:
          USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
          PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
          
        run: |
          artifactName=$(ls *.jar | head -1)
          mvn mule:deploy -Dmule.artifact=$artifactName -Dusername=$USERNAME -Dpassword=$PASSWORD
